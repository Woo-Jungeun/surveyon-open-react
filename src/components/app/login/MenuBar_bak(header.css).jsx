import React, { useEffect, useRef, useState } from "react";
import { NavLink } from "react-router-dom";
export default function MenuBar({ userName = "", links = {} }) {
  
  // /o2 Ï†ëÎëêÏÇ¨Î•º Ìï≠ÏÉÅ ‚ÄòÎ∂ôÏó¨Ï£ºÎäî‚Äô Ìó¨Ìçº (Ï†àÎåÄ ÏßÄÏö∞ÏßÄ ÏïäÏùå)
  const addBase = (p) => {
    if (!p) return "/o2/";             // Í∏∞Î≥∏ÏùÄ /o2/
    if (p === "/o2") return "/o2/";    // /o2 -> /o2/
    if (p.startsWith("/o2/")) return p;
    if (p.startsWith("/")) return "/o2" + p;  // /projects -> /o2/projects
    return "/o2/" + p.replace(/^\/?/, "");    // projects -> /o2/projects
  };

  // Í∏∞Î≥∏ ÎùºÏö∞Ìä∏
  const defaults = {
    analysis: "/o2/",
    projects: "/o2/projects",
    questions: "/o2/questions",
    createProject: "/o2/projects/new",
    addQuestion: "/o2/questions/new",
    userSettings: "/o2/admin/users",
    apiSettings: "/o2/settings/api",
  };

  // Ïô∏Î∂ÄÏóêÏÑú ÎÑòÏñ¥Ïò® linksÎèÑ /o2 Ï†ëÎëê Î≥¥Ïû•Ìï¥ÏÑú Î≥ëÌï©
  const raw = { ...defaults, ...links };
  const L = {
    analysis: addBase(raw.analysis),
    projects: addBase(raw.projects),
    questions: addBase(raw.questions),
    createProject: addBase(raw.createProject),
    addQuestion: addBase(raw.addQuestion),
    userSettings: addBase(raw.userSettings),
    apiSettings: addBase(raw.apiSettings),
    // ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú Ïù¥ÎèôÏùÄ Í∑∏ÎåÄÎ°ú
    logout: links.logout || "/pro_login?session_logout=logout",
  };

  const [openGrid, setOpenGrid] = useState(false);
  const [openUser, setOpenUser] = useState(false);
  const gridRef = useRef(null);
  const userRef = useRef(null);

  const TABS = [
    { label: "ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù", to: L.projects },
    { label: "Î¨∏Ìï≠ Î™©Î°ù", to: L.questions },
    { label: "Î∂ÑÏÑù", to: L.analysis }, // "/o2/"
  ];

  useEffect(() => {
    const onDocClick = (e) => {
      if (gridRef.current && !gridRef.current.contains(e.target)) setOpenGrid(false);
      if (userRef.current && !userRef.current.contains(e.target)) setOpenUser(false);
    };
    const onKey = (e) => {
      if (e.key === "Escape") { setOpenGrid(false); setOpenUser(false); }
    };
    document.addEventListener("click", onDocClick);
    document.addEventListener("keydown", onKey);
    return () => {
      document.removeEventListener("click", onDocClick);
      document.removeEventListener("keydown", onKey);
    };
  }, []);

  return (
    <header className="smopen-header" role="banner">
      <div className="smh-bar">
        <div className="smh-box">
          {/* Ï¢åÏ∏°: Î°úÍ≥† + 1depth */}
          <div style={{ display: "flex", alignItems: "center", gap: 20 }}>
            <div className="smh-brand">
              <NavLink to={L.analysis} end>ÏÑ§Î¨∏Ïò®-OPEN</NavLink>
            </div>

            <nav className="smh-nav" aria-label="Primary">
              <ul className="smh-nav-list">
                {TABS.map((tab) => (
                  <li key={tab.to}>
                    <div className="li_txt">
                      <NavLink
                        to={tab.to}
                        end={tab.to === "/o2/"}              // Î£®Ìä∏Îßå endÎ°ú Ï†ïÌôï Îß§Ïπ≠
                        className={({ isActive }) => (isActive ? "on" : undefined)}
                      >
                        {tab.label}
                      </NavLink>
                    </div>
                  </li>
                ))}
              </ul>
            </nav>
          </div>

          {/* Ïö∞Ï∏°: 9Ï†ê Î©îÎâ¥ + Ïú†Ï†Ä */}
          <div className="smh-util">
            <div className="smh-grid-wrap" ref={gridRef}>
              <button
                type="button"
                className="smh-grid-btn"
                aria-haspopup="true"
                aria-expanded={openGrid}
                aria-label="Îπ†Î•∏ ÏûëÏóÖ Î©îÎâ¥"
                onClick={(e) => { e.stopPropagation(); setOpenGrid(v => !v); setOpenUser(false); }}
              >
                <span /><span /><span />
                <span /><span /><span />
                <span /><span /><span />
              </button>

              <div className={`smh-dd ${openGrid ? "show" : ""}`} role="menu">
                <ul className="smh-grid">
                  <li><NavLink to={L.createProject}><span className="smh-ico green">+</span><span>ÌîÑÎ°úÏ†ùÌä∏Îì±Î°ù</span></NavLink></li>
                  <li><NavLink to={L.addQuestion}><span className="smh-ico red">+</span><span>Î¨∏Ìï≠Ï∂îÍ∞Ä</span></NavLink></li>
                  <li><NavLink to={L.userSettings}><span className="smh-ico cyan">üë•</span><span>ÏÇ¨Ïö©ÏûêÏÑ§Ï†ï</span></NavLink></li>
                  <li><NavLink to={L.apiSettings}><span className="smh-ico blue">üîë</span><span>APIÏÑ§Ï†ï</span></NavLink></li>
                </ul>
              </div>
            </div>

            <div className="smh-user" ref={userRef}>
              <button
                type="button"
                className="smh-user-btn"
                aria-haspopup="true"
                aria-expanded={openUser}
                aria-label="ÏÇ¨Ïö©Ïûê Î©îÎâ¥"
                onClick={(e) => { e.stopPropagation(); setOpenUser(v => !v); setOpenGrid(false); }}
              >
                <span className="smh-avatar" aria-hidden>
                  <svg viewBox="0 0 24 24" focusable="false" aria-hidden="true">
                    <path fill="currentColor" d="M12 12c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm0 2c-3.87 0-7 1.79-7 4v1h14v-1c0-2.21-3.13-4-7-4z" />
                  </svg>
                </span>
                <span className="smh-name">{userName || "-"}</span>
              </button>

              <div className={`smh-dd smh-user-dd ${openUser ? "show" : ""}`} role="menu">
                <a href={L.logout}>Î°úÍ∑∏ÏïÑÏõÉ</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}
