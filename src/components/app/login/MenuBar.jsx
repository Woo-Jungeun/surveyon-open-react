import { NavLink, useNavigate, useLocation } from "react-router-dom";
import { Fragment, useContext, useEffect, useRef, useState } from "react";
import { useSelector } from "react-redux";
import { persistor } from "@/common/redux/store/StorePersist.jsx";
import { modalContext } from "@/components/common/Modal.jsx";
import { useCookies } from "react-cookie";

/**
 * ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù ÌÅ¥Î¶≠ Ïãú ‚Üí ÌÉ≠: ["/"]
 * Î¨∏Ìï≠ Î™©Î°ù Ïù¥Îèô Ïãú ‚Üí ÌÉ≠: ["/", "/pro_list"]
 * Î∂ÑÏÑù Ïù¥Îèô Ïãú ‚Üí ÌÉ≠: ["/", "/pro_list", "/option_setting"]
*/
const ROUTE_LABEL = {
  "/": "ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù",
  "/pro_list": "Î¨∏Ìï≠ Î™©Î°ù",
  "/option_setting": "Î∂ÑÏÑù",
};

// ÌòÑÏû¨ Í≤ΩÎ°úÎ•º 1ÎéÅÏä§Î°ú Ï†ïÍ∑úÌôî
const normalize = (p) => {
  if (!p || p === "/") return "/";
  const seg = p.split("?")[0].split("/").filter(Boolean);
  return "/" + (seg[0] || "");
};

// ÌòÑÏû¨ Í≤ΩÎ°úÏóê ÎßûÎäî ÌÉ≠ Ìä∏Î†àÏùº Í≥ÑÏÇ∞
const trailFor = (key) => {
  if (key === "/option_setting") return ["/", "/pro_list", "/option_setting"];
  if (key === "/pro_list") return ["/", "/pro_list"];
  return ["/"];
};

const MenuBar = () => {
  const [, , removeCookie] = useCookies();
  const auth = useSelector((store) => store.auth);
  const modal = useContext(modalContext);
  const navigate = useNavigate();
  const location = useLocation();

  const key = normalize(location.pathname);
  const tabs = trailFor(key);

  const projectnum = sessionStorage.getItem("projectnum");
  const projectname = sessionStorage.getItem("projectname");

  // ÎìúÎ°≠Îã§Ïö¥ ÏÉÅÌÉú
  const [appsOpen, setAppsOpen] = useState(false);
  const [userOpen, setUserOpen] = useState(false);

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Îã´Í∏∞Ïö© ref
  const appsRef = useRef(null);
  const userRef = useRef(null);

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú open Îã´Í∏∞
  useEffect(() => {
    const onClickOutside = (e) => {
      if (appsRef.current && !appsRef.current.contains(e.target)) setAppsOpen(false);
      if (userRef.current && !userRef.current.contains(e.target)) setUserOpen(false);
    };
    window.addEventListener("click", onClickOutside);
    return () => window.removeEventListener("click", onClickOutside);
  }, []);

  // Î°úÍ∑∏ÏïÑÏõÉ
  const doLogout = async () => {
    modal.showConfirm("ÏïåÎ¶º", "Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?", {
      btns: [
        { title: "Ï∑®ÏÜå", background: "#75849a" },
        {
          title: "Î°úÍ∑∏ÏïÑÏõÉ",
          click: async () => {
            try {
              await persistor.purge();
              removeCookie("TOKEN", { path: "/" });
              navigate("/"); // Î°úÍ∑∏ÏïÑÏõÉ Ïãú ÌôàÏúºÎ°ú
            } catch {
              modal.showAlert("ÏïåÎ¶º", "Î°úÍ∑∏ÏïÑÏõÉÏùÑ ÌïòÏßÄ Î™ªÌïòÏòÄÏäµÎãàÎã§.");
            }
          },
        },
      ],
    });
  };

  // Ïï±Ïä§(Ï†ê9Í∞ú) ÏïÑÏù¥ÏΩò (SVG) -todo ÏûÑÏãú
  const AppsIcon = () => (
    <svg width="22" height="22" viewBox="0 0 24 24" aria-hidden="true">
      {[0, 1, 2].map(r => [0, 1, 2].map(c => (
        <circle key={`${r}-${c}`} cx={5 + c * 7} cy={5 + r * 7} r="1.5" />
      )))}
    </svg>
  );

  // Ïú†Ï†Ä(ÏÇ¨Îûå) ÏïÑÏù¥ÏΩò -todo ÏûÑÏãú
  const UserIcon = () => (
    <svg width="22" height="22" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-5 0-9 2.5-9 5.5V21h18v-1.5C21 16.5 17 14 12 14Z" />
    </svg>
  );

  return (
    <Fragment>
      <header>
        <h1
          className="logo"
          style={{ cursor: "pointer" }}
          onClick={() => navigate("/")}
        >
          ÏÑ§Î¨∏Ïò® <span className="fcG">OPEN</span>
        </h1>

        <div className="navWrap">
          <ul className="nav depth01">
            {tabs.map((path) => (
              <li key={path}>
                <NavLink
                  to={path}
                  end={path === "/"}
                  className={({ isActive }) => (isActive ? "on" : undefined)}
                >
                  {ROUTE_LABEL[path] ?? path}
                </NavLink>
              </li>
            ))}
          </ul>
        </div>

        <div className="userWrap" style={{ display: "flex", alignItems: "center", gap: 14 }}>
          {/* Ïï± Î©îÎâ¥ */}
          <div ref={appsRef} className="menu-dd">
            <button
              type="button"
              className="iconBtn"
              aria-haspopup="true"
              aria-expanded={appsOpen}
              onClick={(e) => {
                e.stopPropagation();
                setAppsOpen((v) => !v);
                setUserOpen(false);
              }}
            // title="Ïï± Î©îÎâ¥"
            >
              <AppsIcon />
            </button>

            {appsOpen && (
              <div className="dropdown-card apps-card">
                <button
                  type="button"
                  className="dd-item"
                  onClick={() => {
                    setAppsOpen(false);
                    navigate('/pro_enter');
                  }}
                >
                  <span className="dd-icon">Ôºã</span>
                  <span>ÌîÑÎ°úÏ†ùÌä∏ Îì±Î°ù</span>
                </button>
                {(projectnum !== "" && projectname !=="") &&
                  <>
                    <button
                      type="button"
                      className="dd-item"
                      onClick={() => {
                        setAppsOpen(false);
                        navigate('/pro_register');
                      }}
                    >
                      <span className="dd-icon">Ôºã</span>
                      <span>Î¨∏Ìï≠ Îì±Î°ù</span>
                    </button>
                    <button
                  type="button"
                  className="dd-item"
                  onClick={() => {
                    setAppsOpen(false);
                    // navigate('/pro_permission');
                    modal.showAlert("ÏïåÎ¶º", "ÏÇ¨Ïö©ÏûêÏÑ§Ï†ï Ï§ÄÎπÑ Ï§ë");
                  }}
                >
                  <span className="dd-icon">üë§</span>
                  <span>ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï</span>
                </button>
                  </>
                }
                <button
                      type="button"
                      className="dd-item"
                      onClick={() => {
                        setAppsOpen(false);
                        navigate('/pro_key');
                      }}
                    >
                      <span className="dd-icon">üîë</span>
                      <span>API ÏÑ§Ï†ï</span>
                    </button>

              </div>
            )}
          </div>

          {/* ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ - Î°úÍ∑∏ÏïÑÏõÉ Î©îÎâ¥ */}
          <div ref={userRef} className="menu-dd">
            <button
              type="button"
              className="userBtn"
              aria-haspopup="true"
              aria-expanded={userOpen}
              onClick={(e) => {
                e.stopPropagation();
                setUserOpen((v) => !v);
                setAppsOpen(false);
              }}
            // title="ÏÇ¨Ïö©Ïûê Î©îÎâ¥"
            >
              <UserIcon />
              <span style={{ marginLeft: 6 }}>{auth?.user?.userNm || ""}Îãò</span>
            </button>

            {userOpen && (
              <div className="dropdown-card user-card">
                <button type="button" className="dd-item only" onClick={doLogout}>
                  <span className="dd-icon">‚Ü™</span>
                  <span>Î°úÍ∑∏ÏïÑÏõÉ</span>
                </button>
              </div>
            )}
          </div>
        </div>
      </header>
    </Fragment>
  );
};

export default MenuBar;
